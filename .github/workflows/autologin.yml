name: FreeDNS Auto Login (终极调试版)

# ... (其他配置保持不变，如 on: 和 jobs:)

jobs:
  auto_login:
    runs-on: ubuntu-latest
    
    env:
      USERNAME: ${{ secrets.AFRAID_USERNAME }}
      PASSWORD: ${{ secrets.AFRAID_PASSWORD }}
      
    steps:
      - name: 🔍 详细调试登录过程
        id: debug_login
        run: |
          # --- 步骤 1: 定义常量 ---
          BASE_URL="https://freedns.afraid.org"
          LOGIN_URL="${BASE_URL}/zc.php"
          DORMANT_EXTEND_URL="${BASE_URL}/dormant/?action=extend"
          SUCCESS_INDICATOR="Subdomains" # 尝试一个常见的成功标志
          
          # 存储会话 Cookie 的文件和 HTML 文件的临时位置
          COOKIE_FILE=$(mktemp)
          HTML_FILE=$(mktemp)
          
          echo "### 1. GET 登录页以获取 Cookie 和 CSRF 令牌 ###"
          
          # 使用 -v (详细模式) 获取登录页，并将响应的 HTML 写入 HTML_FILE
          LOGIN_PAGE_HTML=$(curl -v -s -L -c "$COOKIE_FILE" "$LOGIN_URL" -o "$HTML_FILE" 2>&1)
          
          echo "$LOGIN_PAGE_HTML"
          echo "--- 提取 CSRF 令牌 ---"
          
          # 从保存的 HTML 文件中提取 CSRF 令牌 (假设字段名为 csrf_token)
          CSRF_TOKEN=$(grep -o 'name="csrf_token" value="[^"]*"' "$HTML_FILE" | head -1 | sed 's/.*value="\([^"]*\)".*/\1/')

          if [ -z "$CSRF_TOKEN" ]; then
              echo "✅ 未找到名为 'csrf_token' 的隐藏字段，继续执行。"
          else
              echo "✅ 成功提取 CSRF 令牌: ${CSRF_TOKEN}"
          fi
          
          echo "### 2. POST 提交登录表单 ###"
          
          # 构造 POST 数据。请检查并修改这里的字段名（username, password, submit=Login）
          # 如果您发现字段名不同，请在此处修改！
          # 我们将 CSRF 令牌添加到 POST 数据中
          LOGIN_DATA="username=${USERNAME}&password=${PASSWORD}&submit=Login&csrf_token=${CSRF_TOKEN}"
          
          echo "POST 数据载荷: ${LOGIN_DATA}"
          
          # 再次使用 -v 进行 POST 请求，携带 Cookie (-b) 并保存新的 Cookie (-c)
          POST_DEBUG_OUTPUT=$(curl -v -s -L -b "$COOKIE_FILE" -c "$COOKIE_FILE" -X POST \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -H "User-Agent: GitHubActionsBot" \
            -d "$LOGIN_DATA" \
            "$LOGIN_URL" -o "$HTML_FILE" 2>&1)

          echo "$POST_DEBUG_OUTPUT"
          
          # 读取 POST 请求返回的 HTML 内容进行检查
          LOGIN_RESPONSE=$(cat "$HTML_FILE")
          
          # --- 步骤 3: 验证登录成功 ---
          if echo "$LOGIN_RESPONSE" | grep -q "$SUCCESS_INDICATOR"; then
            echo "✅ 登录成功！页面内容包含: ${SUCCESS_INDICATOR}"
          else
            echo "::error:: 登录失败！未在响应内容中找到 '${SUCCESS_INDICATOR}'。"
            echo "--- POST 响应 HTML 预览 (错误页或登录表单) ---"
            echo "$LOGIN_RESPONSE" | head -n 30
            echo "----------------------------------------------------"
            exit 1
          fi

          # --- 步骤 4: 延长账户期限 ---
          echo "登录会话有效。尝试延长账户期限..."
          EXTEND_RESPONSE=$(curl -s -L -b "$COOKIE_FILE" -H "User-Agent: GitHubActionsBot" "$DORMANT_EXTEND_URL")
            
          # --- 步骤 5: 验证延长结果 ---
          if echo "$EXTEND_RESPONSE" | grep -q "Your account has been extended"; then
            echo "✅ 账户延长成功！"
          elif echo "$EXTEND_RESPONSE" | grep -q "You have no dormant domains"; then
            echo "✅ 账户目前没有休眠域名，任务完成。"
          else
            echo "⚠️ 延长操作失败或页面内容不明确。请手动检查账户。"
          fi
