// 在 Worker 设置中定义的 Secrets 变量
const USERNAME = YOUR_USERNAME_SECRET;
const PASSWORD = YOUR_PASSWORD_SECRET;

const BASE_URL = 'https://freedns.afraid.org';
// 登录目标 URL 更新为您提供的 URL
const LOGIN_URL = `${BASE_URL}/zc.php`; 
const DORMANT_EXTEND_URL = `${BASE_URL}/dormant/?action=extend`; 
// 登录后检查成功的 URL，例如子域名控制面板
const SUCCESS_CHECK_URL = `${BASE_URL}/sub/control/`; 

/**
 * 模拟完整的登录和延长账户流程
 */
addEventListener('fetch', event => {
    event.respondWith(handleLoginAndExtend());
});

async function handleLoginAndExtend() {
    let sessionCookies = ''; // 存储和传递整个会话的 Cookie
    
    // --- 步骤 1: 访问 zc.php 获取初始会话 Cookie/CSRF (如果需要) ---
    // 首次 GET 请求通常用于初始化会话和获取潜在的 CSRF 令牌
    try {
        const initialGetResponse = await fetch(LOGIN_URL);
        sessionCookies = initialGetResponse.headers.get('Set-Cookie') || '';
        
        // **注意：** freedns.afraid.org 的表单提交很可能需要 CSRF 令牌或隐藏字段。
        // 如果需要，您必须解析 initialGetResponse.text() 来提取它。
        // 由于 Worker 缺乏 DOM 解析能力，此代码假设不需要，但若登录失败，请手动检查。
        
    } catch (e) {
        return new Response(`初始化 GET 请求失败: ${e.message}`, { status: 500 });
    }

    // --- 步骤 2: POST 提交登录表单 ---
    const formData = new URLSearchParams();
    formData.append('username', USERNAME);
    formData.append('password', PASSWORD);
    // 假设表单中有一个提交按钮名为 'submit'，值可能为 'Login' 或其他
    formData.append('submit', 'Login'); 

    // 发送 POST 请求进行登录
    const loginPostResponse = await fetch(LOGIN_URL, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            // 携带第一步获得的会话 Cookie
            'Cookie': sessionCookies, 
            'User-Agent': 'CloudflareWorker/1.0 (AfraidAutoLogin)',
            'Referer': LOGIN_URL,
        },
        body: formData.toString(),
        redirect: 'manual' // 保持手动处理，以防意外的 Set-Cookie
    });
    
    // 捕获登录 POST 响应中新的或更新的 Cookie
    const newCookies = loginPostResponse.headers.get('Set-Cookie');
    if (newCookies) {
        // 简单地将新的 Cookie 追加到当前会话 Cookie 中
        sessionCookies = `${sessionCookies.length > 0 ? sessionCookies + '; ' : ''}${newCookies}`;
    }

    // --- 步骤 3: 验证登录是否成功 (访问控制面板) ---
    // 登录 POST 成功后，服务器应该已经将会话 Cookie 包含在 sessionCookies 中。
    const checkResponse = await fetch(SUCCESS_CHECK_URL, {
        method: 'GET',
        headers: {
            'Cookie': sessionCookies, // 携带登录会话 Cookie
            'User-Agent': 'CloudflareWorker/1.0 (AfraidAutoLogin)',
        }
    });

    const checkBodyText = await checkResponse.text();

    // 检查页面内容是否包含登录成功的标志，例如 'Last IP' 或您的用户名
    if (!checkBodyText.includes('Last IP') && !checkBodyText.includes(USERNAME)) {
        return new Response(`❌ 自动登录失败。访问控制面板时未找到 'Last IP'。请检查用户名/密码。`, { status: 200 });
    }
    
    // --- 步骤 4: 访问休眠账户页面并延长 ---
    // 模拟 Python 代码中的延长操作
    const extendResponse = await fetch(DORMANT_EXTEND_URL, {
        method: 'GET',
        headers: {
            'Cookie': sessionCookies, // 必须携带登录后的会话 Cookie
            'User-Agent': 'CloudflareWorker/1.0 (AfraidAutoLogin)',
        }
    });
    
    const extendBodyText = await extendResponse.text();

    // --- 步骤 5: 验证延长结果 ---
    if (extendBodyText.includes('Your account has been extended')) {
        return new Response(`✅ Freedns.afraid.org 自动登录并延长账户成功!`, { 
            status: 200,
            headers: { 'Content-Type': 'text/plain;charset=UTF-8' }
        });
    } else if (extendBodyText.includes('You have no dormant domains')) {
        return new Response(`✅ 自动登录成功，但目前没有休眠域名需要延长。`, { 
            status: 200,
            headers: { 'Content-Type': 'text/plain;charset=UTF-8' }
        });
    } else {
        // 登录成功，但延长失败或延长页面返回内容不明确
        return new Response(`⚠️ 登录成功，但延长操作可能失败。请手动检查账户。`, { 
            status: 200,
            headers: { 'Content-Type': 'text/plain;charset=UTF-8' }
        });
    }
}
